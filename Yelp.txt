Data Scientist Role Play: Profiling and Analyzing the Yelp Dataset Coursera Worksheet

This is a 2-part assignment. In the first part, you are asked a series of questions that will help you profile and understand the data just like a data scientist would. For this first part of the assignment, you will be assessed both on the correctness of your findings, as well as the code you used to arrive at your answer. You will be graded on how easy your code is to read, so remember to use proper formatting and comments where necessary.

In the second part of the assignment, you are asked to come up with your own inferences and analysis of the data for a particular research question you want to answer. You will be required to prepare the dataset for the analysis you choose to do. As with the first part, you will be graded, in part, on how easy your code is to read, so use proper formatting and comments to illustrate and communicate your intent as required.

For both parts of this assignment, use this "worksheet." It provides all the questions you are being asked, and your job will be to transfer your answers and SQL coding where indicated into this worksheet so that your peers can review your work. You should be able to use any Text Editor (Windows Notepad, Apple TextEdit, Notepad ++, Sublime Text, etc.) to copy and paste your answers. If you are going to use Word or some other page layout application, just be careful to make sure your answers and code are lined appropriately.
In this case, you may want to save as a PDF to ensure your formatting remains intact for you reviewer.



Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:

-- Code
SELECT 'Attribute table' AS table_name, COUNT(*) AS total_records FROM attribute
UNION ALL
SELECT 'Business table' AS table_name, COUNT(*) AS total_records FROM business
UNION ALL
SELECT 'Category table' AS table_name, COUNT(*) AS total_records FROM category
UNION ALL
SELECT 'Checkin table' AS table_name, COUNT(*) AS total_records FROM checkin
UNION ALL
SELECT 'Elite_years table' AS table_name, COUNT(*) AS total_records FROM elite_years
UNION ALL
SELECT 'Friend table' AS table_name, COUNT(*) AS total_records FROM friend
UNION ALL
SELECT 'Hours table' AS table_name, COUNT(*) AS total_records FROM hours
UNION ALL
SELECT 'Photo table' AS table_name, COUNT(*) AS total_records FROM photo
UNION ALL
SELECT 'Review table' AS table_name, COUNT(*) AS total_records FROM review
UNION ALL
SELECT 'Tip table' AS table_name, COUNT(*) AS total_records FROM tip
UNION ALL
SELECT 'User table' AS table_name, COUNT(*) AS total_records FROM user;
-- Code

i. Attribute table = 10000 
ii. Business table = 10000 
iii. Category table = 10000 
iv. Checkin table = 10000
v. elite_years table = 10000
vi. friend table = 10000 
vii. hours table = 10000
viii. photo table = 10000
ix. review table = 10000
x. tip table = 10000
xi. user table = 10000
	


2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.

-- Code
SELECT 'Business' AS table_name, COUNT(DISTINCT id) AS total_distinct_records FROM business -- Primary key
UNION ALL
SELECT 'Hours' AS table_name, COUNT(DISTINCT business_id) AS total_distinct_records FROM hours -- Foreign key
UNION ALL
SELECT 'Category' AS table_name, COUNT(DISTINCT business_id) AS total_distinct_records FROM category -- Foreign key
UNION ALL
SELECT 'Attribute' AS table_name, COUNT(DISTINCT business_id) AS total_distinct_records FROM attribute -- Foreign key
UNION ALL
SELECT 'Review' AS table_name, COUNT(DISTINCT user_id) AS total_distinct_records FROM review -- Foreign key (user_id)
UNION ALL
SELECT 'Checkin' AS table_name, COUNT(DISTINCT business_id) AS total_distinct_records FROM checkin -- Foreign key
UNION ALL
SELECT 'Photo' AS table_name, COUNT(DISTINCT business_id) AS total_distinct_records FROM photo -- Foreign key
UNION ALL
SELECT 'Tip' AS table_name, COUNT(DISTINCT user_id) AS total_distinct_records FROM tip -- Foreign key (user_id)
UNION ALL
SELECT 'User' AS table_name, COUNT(DISTINCT id) AS total_distinct_records FROM user -- Primary key
UNION ALL
SELECT 'Friend' AS table_name, COUNT(DISTINCT user_id) AS total_distinct_records FROM friend -- Foreign key
UNION ALL
SELECT 'Elite_years' AS table_name, COUNT(DISTINCT user_id) AS total_distinct_records FROM elite_years; -- Foreign key
-- Code

i. Business = 10000 id
ii. Hours = 1562 business_id
iii. Category = 2643 business_id
iv. Attribute = 1115 business_id
v. Review = 9581 user_id
vi. Checkin = 493 business_id
vii. Photo = 6493 business_id
viii. Tip = 537 user_id
ix. User = 10000 id
x. Friend = 11 user_id
xi. Elite_years = 2780 user_id

Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.	



3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer: no
	
	
	SQL code used to arrive at answer:
	
		SELECT COUNT(*) AS na_values
		FROM user
		WHERE id IS NULL OR  
		name IS NULL OR  
		review_count IS NULL OR  
		yelping_since IS NULL OR  
		useful IS NULL OR  
		funny IS NULL OR  
		cool IS NULL OR  
		fans IS NULL OR  
		average_stars IS NULL OR  
		compliment_hot IS NULL OR  
		compliment_more IS NULL OR  
		compliment_profile IS NULL OR  
		compliment_cute IS NULL OR  
		compliment_list IS NULL OR  
		compliment_note IS NULL OR  
		compliment_plain IS NULL OR  
		compliment_cool IS NULL OR  
		compliment_funny IS NULL OR  
		compliment_writer IS NULL OR  
		compliment_photos IS NULL;

	
4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

	i. Table: Review, Column: Stars
	
		min: 1 		max: 5		avg: 3.7082 
		
	
	ii. Table: Business, Column: Stars
	
		min: 1.0 	max: 5.0	avg: 3.6549 
		
	
	iii. Table: Tip, Column: Likes
	
		min: 0		max: 2		avg: 0.0144
		
	
	iv. Table: Checkin, Column: Count
	
		min: 1		max: 53		avg: 1.9414
		
	
	v. Table: User, Column: Review_count
	
		min: 0		max: 2000		avg: 24.2995
		

Sample code:

SELECT MIN(Review_count), MAX(Review_count), AVG(Review_count)
FROM  User;


5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer:

		SELECT city, SUM(review_count) AS TotalReviews
		FROM  business  
		GROUP BY city
		ORDER BY TotalReviews DESC;
	
	
	Copy and Paste the Result Below:


		+-----------------+--------------+
		| city            | TotalReviews |
		+-----------------+--------------+
		| Las Vegas       |        82854 |
		| Phoenix         |        34503 |
		| Toronto         |        24113 |
		| Scottsdale      |        20614 |
		| Charlotte       |        12523 |
		| Henderson       |        10871 |
		| Tempe           |        10504 |
		| Pittsburgh      |         9798 |
		| Montréal        |         9448 |
		| Chandler        |         8112 |
		| Mesa            |         6875 |
		| Gilbert         |         6380 |
		| Cleveland       |         5593 |
		| Madison         |         5265 |
		| Glendale        |         4406 |
		| Mississauga     |         3814 |
		| Edinburgh       |         2792 |
		| Peoria          |         2624 |
		| North Las Vegas |         2438 |
		| Markham         |         2352 |
		| Champaign       |         2029 |
		| Stuttgart       |         1849 |
		| Surprise        |         1520 |
		| Lakewood        |         1465 |
		| Goodyear        |         1155 |
		+-----------------+--------------+
		(Output limit exceeded, 25 of 362 total rows shown)
	

	
6. Find the distribution of star ratings to the business in the following cities:

i. Avon

SQL code used to arrive at answer:

	SELECT
	stars AS StarsNumber, COUNT(*) AS Frecuency
	FROM business
	WHERE city = 'Avon'
	GROUP BY stars;

Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):

	+-------------+-----------+
	| StarsNumber | Frecuency |
	+-------------+-----------+
	|         1.5 |         1 |
	|         2.5 |         2 |
	|         3.5 |         3 |
	|         4.0 |         2 |
	|         4.5 |         1 |
	|         5.0 |         1 |
	+-------------+-----------+


ii. Beachwood

SQL code used to arrive at answer:

	SELECT
	stars AS StarsNumber, COUNT(*) AS Frecuency
	FROM business
	WHERE city = 'Beachwood'
	GROUP BY stars;

Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):
		
	+-------------+-----------+
	| StarsNumber | Frecuency |
	+-------------+-----------+
	|         2.0 |         1 |
	|         2.5 |         1 |
	|         3.0 |         2 |
	|         3.5 |         2 |
	|         4.0 |         1 |
	|         4.5 |         2 |
	|         5.0 |         5 |
	+-------------+-----------+		


7. Find the top 3 users based on their total number of reviews:
		
	SQL code used to arrive at answer:
	
	SELECT
	id, name,
	review_count
	FROM user
	ORDER BY review_count DESC
	LIMIT 3;
		
	Copy and Paste the Result Below:
		
	+------------------------+--------+--------------+
	| id                     | name   | review_count |
	+------------------------+--------+--------------+
	| -G7Zkl1wIWBBmD0KRy_sCw | Gerald |         2000 |
	| -3s52C4zL_DHRK0ULG6qtg | Sara   |         1629 |
	| -8lbUNlXVSoXqaRRiHiSNg | Yuri   |         1339 |
	+------------------------+--------+--------------+

8. Does posing more reviews correlate with more fans?

	Please explain your findings and interpretation of the results:
	
		Yes, within 700 or fewer reviews given, the correlation is clear (see in the table below of the code).
		The more reviews you give, the more fans you get. Beyond 700 reviews given, the average increase is not steady. 
		This is probably because only a few users reach those levels.

		-- Code

		SELECT 
			-- Grouping/Binning based on the number of reviews given
			CASE 
				WHEN review_count BETWEEN 0 AND 100 THEN 'A.0-100'
				WHEN review_count > 100 AND review_count <= 200 THEN 'B.101-200'
				WHEN review_count > 200 AND review_count <= 300 THEN 'C.201-300'
				WHEN review_count > 300 AND review_count <= 400 THEN 'D.301-400'
				WHEN review_count > 400 AND review_count <= 500 THEN 'E.401-500'
				WHEN review_count > 500 AND review_count <= 600 THEN 'F.501-600'
				WHEN review_count > 600 AND review_count <= 700 THEN 'G.601-700'
				WHEN review_count > 700 AND review_count <= 800 THEN 'H.701-800'
				WHEN review_count > 800 AND review_count <= 900 THEN 'I.801-900'
				WHEN review_count > 900 AND review_count <= 1000 THEN 'J.901-1000'
				WHEN review_count > 1000 AND review_count <= 1100 THEN 'K.1001-1100'
				WHEN review_count > 1100 AND review_count <= 1200 THEN 'L.1101-1200'
				WHEN review_count > 1200 AND review_count <= 1300 THEN 'M.1201-1300'
				WHEN review_count > 1300 AND review_count <= 1400 THEN 'N.1301-1400'
				WHEN review_count > 1400 AND review_count <= 1500 THEN 'O.1401-1500'
				WHEN review_count > 1500 AND review_count <= 1600 THEN 'P.1501-1600'
				WHEN review_count > 1600 AND review_count <= 1700 THEN 'Q.1601-1700'
				WHEN review_count > 1700 AND review_count <= 1800 THEN 'R.1701-1800'
				WHEN review_count > 1800 AND review_count <= 1900 THEN 'S.1801-1900'
				WHEN review_count > 1900 AND review_count <= 2000 THEN 'T.1901-2000'
			END AS reviews_given,

			-- Average number of fans per level
			AVG(fans) AS ave_num_fans,

			-- Frequency of each level
			COUNT(*) AS frequency
		
		FROM user
		GROUP BY reviews_given
		ORDER BY reviews_given ASC;
		
		-- Code

		Output:

		+---------------+--------------------+-----------+
		| reviews_given |       ave_num_fans | frequency |
		+---------------+--------------------+-----------+
		| A.0-100       | 0.4367888748419722 |      9492 |
		| B.101-200     |  8.933333333333334 |       270 |
		| C.201-300     | 18.523364485981308 |       107 |
		| D.301-400     | 25.210526315789473 |        57 |
		| E.401-500     |  31.76923076923077 |        26 |
		| F.501-600     |  32.84615384615385 |        13 |
		| G.601-700     |               76.0 |        14 |
		| H.701-800     |               58.0 |         3 |
		| I.801-900     |  97.57142857142857 |         7 |
		| J.901-1000    |              236.0 |         3 |
		| K.1001-1100   |              104.0 |         1 |
		| L.1101-1200   |              163.5 |         2 |
		| M.1201-1300   |              113.5 |         2 |
		| N.1301-1400   |               76.0 |         1 |
		| Q.1601-1700   |               50.0 |         1 |
		| T.1901-2000   |              253.0 |         1 |
		+---------------+--------------------+-----------+


		From the table, we notice that the most part of users provided 100 or fewer reviews.
		Therefore, it’s more meaningful to focus our analysis on this subset of users.

		Let see the first level distribution:

		+---------------+---------------------+-----------+
		| reviews_given |        ave_num_fans | frequency |
		+---------------+---------------------+-----------+
		| 0-10          | 0.12484921592279856 |      6632 |
		| 11-20         | 0.43831417624521074 |      1305 |
		| 21-30         |  0.7979094076655052 |       574 |
		| 31-40         |  1.2484472049689441 |       322 |
		| 41-50         |  1.7676767676767677 |       198 |
		| 51-60         |  2.6402877697841727 |       139 |
		| 61-70         |              2.5625 |       112 |
		| 71-80         |   3.768292682926829 |        82 |
		| 81-90         |                 4.2 |        65 |
		| 91-100        |   4.761904761904762 |        63 |
		| None          |  21.161417322834644 |       508 |
		+---------------+---------------------+-----------+

		The correlation seems still clear. The 'None' level that indicates the number of users that are not in the first level.

		-- Code table 2

		SELECT 
		
		-- Grouping/Binning based on the number of reviews given
			
			CASE 
				WHEN review_count BETWEEN 0 AND 10 THEN '0-10'
				WHEN review_count > 10 AND review_count <= 20 THEN '11-20'
				WHEN review_count > 20 AND review_count <= 30 THEN '21-30'
				WHEN review_count > 30 AND review_count <= 40 THEN '31-40'
				WHEN review_count > 40 AND review_count <= 50 THEN '41-50'
				WHEN review_count > 50 AND review_count <= 60 THEN '51-60'
				WHEN review_count > 60 AND review_count <= 70 THEN '61-70'
				WHEN review_count > 70 AND review_count <= 80 THEN '71-80'
				WHEN review_count > 80 AND review_count <= 90 THEN '81-90'
				WHEN review_count > 90 AND review_count <= 100 THEN '91-100'
				WHEN review_count > 100 THEN 'None'

			END AS reviews_given,

		-- Average number of fans per level
			AVG(fans) AS ave_num_fans,

		-- Frequency of each level
			COUNT(*) AS frequency
			
		FROM user
		GROUP BY reviews_given
		ORDER BY reviews_given ASC;

		-- Code table 2

9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer:

		Yes. There are 1780 reviews with the word "love" while there are 232 reviews for "hate".
	

	
	SQL code used to arrive at answer:

		-- For 'love' word

			SELECT COUNT(*) AS Love_count
			FROM review
			WHERE text LIKE '%love%'


		-- For 'hate' word

			SELECT COUNT(*) AS Hate_count
			FROM review
			WHERE text LIKE '%hate%';
	
	
10. Find the top 10 users with the most fans:

	SQL code used to arrive at answer:

		SELECT 
		name,
		fans
		FROM user
		ORDER BY fans DESC
		LIMIT 10; 
	
	
	Copy and Paste the Result Below:

		+-----------+------+
		| name      | fans |
		+-----------+------+
		| Amy       |  503 |
		| Mimi      |  497 |
		| Harald    |  311 |
		| Gerald    |  253 |
		| Christine |  173 |
		| Lisa      |  159 |
		| Cat       |  133 |
		| William   |  126 |
		| Fran      |  124 |
		| Lissa     |  120 |
		+-----------+------+
		

Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.
	
	City: Phoenix          
	Category: Restaurants


i. Do the two groups you chose to analyze have a different distribution of hours?

	There are only 8 Phoenix restaurants that have 2-3 and 4-5 stars, as shown below:

		+---------+-------------+----------------------------------------+-----------+
		| city    | category    | name                                   | Rating    |
		+---------+-------------+----------------------------------------+-----------+
		| Phoenix | Restaurants | McDonald's                             | 2-3 stars |
		| Phoenix | Restaurants | Gallagher's                            | 2-3 stars |
		| Phoenix | Restaurants | Bootleggers Modern American Smokehouse | 4-5 stars |
		| Phoenix | Restaurants | Charlie D's Catfish & Chicken          | 4-5 stars |
		| Phoenix | Restaurants | Matt's Big Breakfast                   | 4-5 stars |
		+---------+-------------+----------------------------------------+-----------+

		Now, the hours distribution for the 2-3 stars rated group is given below:

		+------------------------+----------------------+-----------+
		| Restaurants in Phoenix | hours                | Rating    |
		+------------------------+----------------------+-----------+
		| McDonald's             | Monday|5:00-23:00    | 2-3 stars |
		| McDonald's             | Tuesday|5:00-23:00   | 2-3 stars |
		| McDonald's             | Friday|5:00-0:00     | 2-3 stars |
		| McDonald's             | Wednesday|5:00-23:00 | 2-3 stars |
		| McDonald's             | Thursday|5:00-23:00  | 2-3 stars |
		| McDonald's             | Sunday|5:00-23:00    | 2-3 stars |
		| McDonald's             | Saturday|5:00-0:00   | 2-3 stars |
		| Gallagher's            | Monday|11:00-0:00    | 2-3 stars |
		| Gallagher's            | Tuesday|11:00-0:00   | 2-3 stars |
		| Gallagher's            | Friday|11:00-2:00    | 2-3 stars |
		| Gallagher's            | Wednesday|11:00-0:00 | 2-3 stars |
		| Gallagher's            | Thursday|11:00-2:00  | 2-3 stars |
		| Gallagher's            | Sunday|9:00-0:00     | 2-3 stars |
		| Gallagher's            | Saturday|9:00-2:00   | 2-3 stars |
		+------------------------+----------------------+-----------+

		And for the 4-5 stars rated group:

		+----------------------------------------+-----------------------+-----------+
		| Restaurants in Phoenix                 | hours                 | Rating    |
		+----------------------------------------+-----------------------+-----------+
		| Bootleggers Modern American Smokehouse | Monday|11:00-22:00    | 4-5 stars |
		| Bootleggers Modern American Smokehouse | Tuesday|11:00-22:00   | 4-5 stars |
		| Bootleggers Modern American Smokehouse | Friday|11:00-22:00    | 4-5 stars |
		| Bootleggers Modern American Smokehouse | Wednesday|11:00-22:00 | 4-5 stars |
		| Bootleggers Modern American Smokehouse | Thursday|11:00-22:00  | 4-5 stars |
		| Bootleggers Modern American Smokehouse | Sunday|11:00-22:00    | 4-5 stars |
		| Bootleggers Modern American Smokehouse | Saturday|11:00-22:00  | 4-5 stars |
		| Charlie D's Catfish & Chicken          | Monday|11:00-18:00    | 4-5 stars |
		| Charlie D's Catfish & Chicken          | Tuesday|11:00-18:00   | 4-5 stars |
		| Charlie D's Catfish & Chicken          | Friday|11:00-18:00    | 4-5 stars |
		| Charlie D's Catfish & Chicken          | Wednesday|11:00-18:00 | 4-5 stars |
		| Charlie D's Catfish & Chicken          | Thursday|11:00-18:00  | 4-5 stars |
		| Charlie D's Catfish & Chicken          | Sunday|13:00-16:00    | 4-5 stars |
		| Charlie D's Catfish & Chicken          | Saturday|11:00-18:00  | 4-5 stars |
		+----------------------------------------+-----------------------+-----------+

		ANSWER: High-rated businesses tend to open later than low-rated ones and close earlier during the day.

ii. Do the two groups you chose to analyze have a different number of reviews?

		+-----------+--------------------+
		| Rating    |        ReviewsMean |
		+-----------+--------------------+
		| 2-3 stars |               34.0 |
		| 4-5 stars | 208.66666666666666 |
		+-----------+--------------------+
		

	It seems 4-5 stars rated group tend to recieve more reviews than 2-3 stars rated group.		
         
iii. Are you able to infer anything from the location data provided between these two groups? Explain.

		+-----------+----------------------------------------+--------------+---------------------+----------+-----------+-------------+
		| Rating    | name                                   | neighborhood | address             | latitude | longitude | postal_code |
		+-----------+----------------------------------------+--------------+---------------------+----------+-----------+-------------+
		| 2-3 stars | McDonald's                             |              | 1850 S 7th St       |  33.4297 |  -112.066 | 85004       |
		| 2-3 stars | Gallagher's                            |              | 751 E Union Hls Dr  |  33.6536 |  -112.064 | 85024       |
		| 4-5 stars | Bootleggers Modern American Smokehouse |              | 3375 E Shea Blvd    |  33.5818 |  -112.008 | 85028       |
		| 4-5 stars | Charlie D's Catfish & Chicken          |              | 1153 E Jefferson St |  33.4468 |  -112.057 | 85034       |
		| 4-5 stars | Matt's Big Breakfast                   |              | 3118 E Camelback Rd |   33.511 |  -112.015 | 85016       |
		+-----------+----------------------------------------+--------------+---------------------+----------+-----------+-------------+

	There is nothing to infer here. Neighborhood values are empty. Deeper analysis is needed to infer meaningful insights about the relationship between location and business ratings.




SQL code used for analysis:

	
	
	-- QUESTION i. 1st table:

	SELECT b.city, c.category, b.name,
		-- Definig the stars rating levels
		CASE
			WHEN b.stars BETWEEN 2 AND 3 THEN '2-3 stars'
			WHEN b.stars BETWEEN 4 AND 5 THEN '4-5 stars'
		END AS Rating

	-- Joining business and category tables
	FROM business b INNER JOIN category c ON b.id = c.business_id

	-- Filtering and sorting
	WHERE Rating IS NOT NULL AND b.city = 'Phoenix' AND c.category = 'Restaurants'  -- NULL values come from the CASE statement for b.stars that is neither 2–3 nor 4–5 stars.
	ORDER BY Rating;
			
			

	
	-- QUESTION i. 2nd table: 

	SELECT b.name AS 'Restaurants in Phoenix', h.hours,
		-- Definig the stars rating levels
		CASE
			WHEN b.stars BETWEEN 2 AND 3 THEN '2-3 stars'
			WHEN b.stars BETWEEN 4 AND 5 THEN '4-5 stars'
		END AS Rating

	-- Joining the business, category and hours tables
	FROM (business b INNER JOIN category c) INNER JOIN hours h
	ON b.id = c.business_id AND b.id = h.business_id

	-- Filtering and sorting
	WHERE Rating IS NOT NULL AND c.category = 'Restaurants' AND 
		b.city = 'Phoenix' AND Rating = '2-3 stars';



	
	-- QUESTION i. 3rd table:

	SELECT b.name AS 'Restaurants in Phoenix', h.hours,
		-- Definig the starts rating levels
		CASE
			WHEN b.stars BETWEEN 2 AND 3 THEN '2-3 stars'
			WHEN b.stars BETWEEN 4 AND 5 THEN '4-5 stars'
		END AS Rating

	-- Joining the business, category and hours tables
	FROM (business b INNER JOIN category c) INNER JOIN hours h
	ON b.id = c.business_id AND b.id = h.business_id

	-- Filtering and sorting
	WHERE Rating IS NOT NULL AND c.category = 'Restaurants' AND 
		b.city = 'Phoenix' AND Rating = '4-5 stars';	


	
	
	-- QUESTION ii:

	SELECT  
    -- Definig the stars rating levels
    CASE
        WHEN b.stars BETWEEN 2 AND 3 THEN '2-3 stars'
        WHEN b.stars BETWEEN 4 AND 5 THEN '4-5 stars'
    END AS Rating, 

	-- Calculatin the mean of the reviews number	
    AVG(b.review_count) AS ReviewsMean

	-- Joining the business and category tables
	FROM business b INNER JOIN category c ON b.id = c.business_id 

	-- Filtering and sorting
	WHERE Rating IS NOT NULL AND c.category = 'Restaurants' AND 
		b.city = 'Phoenix'

		-- Doing it for each rating group
        GROUP BY Rating ;




	-- QUESTION iii:

	SELECT 
		-- Definig the stars rating levels
		CASE
			WHEN b.stars BETWEEN 2 AND 3 THEN '2-3 stars'
			WHEN b.stars BETWEEN 4 AND 5 THEN '4-5 stars'
		END AS Rating, 

        b.name,
        b.neighborhood,
        b.address,
        b.latitude,
        b.longitude,
        b.postal_code

	-- Joining business and category tables
	FROM business b INNER JOIN category c ON b.id = c.business_id

	-- Filtering and sorting
	WHERE Rating IS NOT NULL AND b.city = 'Phoenix' AND c.category = 'Restaurants'
	ORDER BY Rating;


2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.
		
		+-----------+----------------+--------------------+
		| Condition | Num_Businesses |       Reviews_Mean |
		+-----------+----------------+--------------------+
		| Close     |           1520 | 23.198026315789473 |
		| Open      |           8480 | 31.757075471698112 |
		+-----------+----------------+--------------------+

i. Difference 1:
	
	There are more opened usinesses (8480) than businesses that are closed (1520).
         
         
ii. Difference 2:
    
	On average, opened businesses received more reviews than closed businesses.
         
         
SQL code used for analysis:
		
		SELECT 
		CASE WHEN is_open = 1 THEN 'Open' ELSE 'Close' END AS Condition, 
		COUNT(name) AS 'Num_Businesses', 
		AVG(review_count) AS Reviews_Mean
		FROM business 
		WHERE name IS NOT NULL
		GROUP BY is_open; 
	
	
3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, clustering businesses to find commonalities or anomalies between them, predicting the overall star rating for a business, predicting the number of fans a user will have, and so on. These are just a few examples to get you started, so feel free to be creative and come up with your own problem you want to solve. Provide answers, in-line, to all of the following:
	
i. Indicate the type of analysis you chose to do:
        
		Clustering businesses to find commonalities or anomalies between the businesses with best star rating or worst star rating.
         
ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:
                           
		I 'll need specific data attributes to uncover meaningful patterns. Here are the types of data you should consider:
	Business Attributes (star ratings, number of reviews, category), Location Data and Temporal Data. It could be possible 
	to study any correlation between the features (linear regression, Pearson correlation, etc...)



iii. Output of your finished dataset:
         

+------------------------+--------------------------------+-----------+-----------------------+------------+--------------------+----------+-----------+-------+--------------+
| id                     | name                           |  category |                 hours | city       | neighborhood       | latitude | longitude | stars | review_count |
+------------------------+--------------------------------+-----------+-----------------------+------------+--------------------+----------+-----------+-------+--------------+
| 2weQS-RnoOBhb1KsHKyoSQ | The Buffet                     |      None |                  None | Las Vegas  | The Strip          |  36.1269 |  -115.166 |   3.5 |         3873 |
| 0W4lkclzZThpx3V65bVgig | Schwartz's                     |      None |                  None | Montréal   | Plateau-Mont-Royal |  45.5164 |  -73.5775 |   4.0 |         1757 |
| 0FUtlsQrJI7LhqDPxLumEw | Joe's Farm Grill               |      None |                  None | Gilbert    |                    |  33.3217 |  -111.726 |   4.0 |         1549 |
| 2iTsRqUsPGRH1li1WVRvKQ | Carson Kitchen                 |      None |                  None | Las Vegas  | Downtown           |  36.1679 |  -115.141 |   4.5 |         1410 |
| --9e1ONYQuAa-CB_Rrw7Tw | Delmonico Steakhouse           |      None |                  None | Las Vegas  | The Strip          |  36.1232 |  -115.169 |   4.0 |         1389 |
| -ed0Yc9on37RoIoG2ZgxBA | Le Thai                        |      None |                  None | Las Vegas  | Downtown           |  36.1688 |   -115.14 |   4.0 |         1252 |
| 0NmTwqYEQiKErDv4a55obg | Scarpetta                      |      None |                  None | Las Vegas  | The Strip          |  36.1102 |  -115.174 |   4.0 |         1116 |
| 0AQnRQw34IQW9-1gJkYnMA | Diablo's Cantina               |      None |                  None | Las Vegas  | The Strip          |  36.1041 |  -115.174 |   3.0 |         1084 |
| -U7tvCtaraTQ9b0zBhpBMA | MGM Grand Buffet               |      None |                  None | Las Vegas  | The Strip          |  36.1021 |  -115.172 |   2.5 |          961 |
| -6tvduBzjLI1ISfs3F_qTg | Joyride Taco House             |      None |                  None | Gilbert    |                    |   33.355 |   -111.79 |   4.0 |          902 |
| 364hhL5st0LV16UcBHRJ3A | Yonaka Modern Japanese         |      None |                  None | Las Vegas  |                    |  36.1149 |   -115.21 |   4.5 |          864 |
| -FLnsWAa4AGEW4NgE8Fqew | Breakfast Club- Scottsdale     |      None |                  None | Scottsdale |                    |     33.5 |  -111.926 |   3.5 |          823 |
| 2sx52lDoiEtef7xgPCaoBw | VegeNation                     |      None |                  None | Las Vegas  | Downtown           |  36.1673 |  -115.139 |   4.5 |          821 |
| 0_aeYE2-VbsZts_UpILgDw | Lazy Dog Restaurant & Bar      |      None |                  None | Las Vegas  | South Summerlin    |  36.1528 |  -115.334 |   4.0 |          786 |
| 0ldxjei8v4q95fApIei3Lg | Lucille's Smokehouse Bar-B-Que |      None |                  None | Henderson  | Anthem             |  36.0206 |  -115.086 |   4.0 |          785 |
| -av1lZI1JDY_RZN2eTMnWg | Salad King Restaurant          |      None |                  None | Toronto    | Downtown Core      |  43.6576 |  -79.3817 |   3.5 |          778 |
| 1ZnVfS-qP19upP_fwOhZsA | Big Wong Restaurant            |   Noodles |    Monday|10:00-23:00 | Las Vegas  | Chinatown          |  36.1267 |   -115.21 |   4.0 |          768 |
| 1ZnVfS-qP19upP_fwOhZsA | Big Wong Restaurant            |   Noodles |   Tuesday|10:00-23:00 | Las Vegas  | Chinatown          |  36.1267 |   -115.21 |   4.0 |          768 |
| 1ZnVfS-qP19upP_fwOhZsA | Big Wong Restaurant            |   Noodles |    Friday|10:00-23:00 | Las Vegas  | Chinatown          |  36.1267 |   -115.21 |   4.0 |          768 |
| 1ZnVfS-qP19upP_fwOhZsA | Big Wong Restaurant            |   Noodles | Wednesday|10:00-23:00 | Las Vegas  | Chinatown          |  36.1267 |   -115.21 |   4.0 |          768 |
| 1ZnVfS-qP19upP_fwOhZsA | Big Wong Restaurant            |   Noodles |  Thursday|10:00-23:00 | Las Vegas  | Chinatown          |  36.1267 |   -115.21 |   4.0 |          768 |
| 1ZnVfS-qP19upP_fwOhZsA | Big Wong Restaurant            |   Noodles |    Sunday|10:00-23:00 | Las Vegas  | Chinatown          |  36.1267 |   -115.21 |   4.0 |          768 |
| 1ZnVfS-qP19upP_fwOhZsA | Big Wong Restaurant            |   Noodles |  Saturday|10:00-23:00 | Las Vegas  | Chinatown          |  36.1267 |   -115.21 |   4.0 |          768 |
| 1ZnVfS-qP19upP_fwOhZsA | Big Wong Restaurant            | Malaysian |    Monday|10:00-23:00 | Las Vegas  | Chinatown          |  36.1267 |   -115.21 |   4.0 |          768 |
| 1ZnVfS-qP19upP_fwOhZsA | Big Wong Restaurant            | Malaysian |   Tuesday|10:00-23:00 | Las Vegas  | Chinatown          |  36.1267 |   -115.21 |   4.0 |          768 |
+------------------------+--------------------------------+-----------+-----------------------+------------+--------------------+----------+-----------+-------+--------------+
(Output limit exceeded, 25 of 13096 total rows shown)


         
iv. Provide the SQL code you used to create your final dataset:

		SELECT
		b.id,
		b.name, 
		c.category,
		h.hours,
		b.city, 
		b.neighborhood,
		b.latitude,
		b. longitude,
		b.stars,
		b.review_count
		FROM (business b LEFT JOIN category c ON b.id = c.business_id) 
		LEFT JOIN hours h on b.id = h.business_id
		ORDER BY b.review_count DESC;